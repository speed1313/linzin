((un fn z : un bool {
    let x : un bool = un true;
    un fn y : un bool {
        x // x をキャプチャ 型環境を保存?
    } // これが返った時, xがスタックから解放される
} un true) un false)
// クロージャでは変数をキャプチャするため, 環境をスタックとは別の場所(heap)に
// 保存する必要がある.
// クロージャがletで束縛されたりしない限り, クロージャが使用された瞬間に
// 環境は不要になるので, その時点で解放されるべき.
// そこで, 環境を指すポインタをroot_setに登録しておき, GCの対象にする.
// 環境を指すポインタがなくなった時点で, 環境は不要になるので, 解放する.
// (un fn z : un bool {
//     let x : un bool = un true;
//     un fn y : un bool {
//         un <x, y> // x をキャプチャ 型環境を保存?
//     } // xがスタックから解放される
// } un true)
// は, 適用されるまでFnExprとして評価せずにしておき, 評価されたタイミングで関数を返すとわかったら, その関数が
// ローカル変数をキャプチャしている場合, 環境を(仮想的な)heapに保存しておく. (これはmapで実現することにする.)
// そして, gcではheapを指すスタックから見えるポインタをroot_setに登録しておき, そのポインタがなくなった時点で, mapから環境を削除する.
// 今回はheap内の環境から別の環境へのポインタはないものとする. つまり(p -> env1)となり, envの探索のためにdfs等をする必要はない.
// 自由変数をheapに入れてポイントすればいい